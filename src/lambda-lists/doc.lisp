(in-package :adhoc-polymorphic-functions)

;; LAMBDA-LIST-TYPE ============================================================

(define-constant +lambda-list-type-doc+
  "Returns the type of LAMBDA-LIST from amongst +LAMBDA-LIST-TYPES+.
Raises an ERROR otherwise."
  :test 'string=)

;; DEFUN-LAMBDA-LIST ===========================================================

(define-constant +defun-lambda-list-doc+
  "Processes LAMBDA-LIST to return another lambda-list suitable for the DEFUN generated by the DEFINE-POLYMORPH. Raises an error if %LAMBDA-LIST-TYPE fails on *POTENTIAL-TYPE*."
  :test 'string=)

(define-constant +defun-lambda-list-doc-helper+
  "Processes LAMBDA-LIST assuming it is of type TYPE, and returns another lambda-list that is suitable for the DEFUN generated by the DEFINE-POLYMORPH. IF *LAMBDA-LIST-TYPED-P* is T, 
the second value is the type-list corresponding to the LAMBDA-LIST"
  :test 'string=)

;; SBCL-TRANSFORM-BODY-ARGS ====================================================

(define-constant +sbcl-transform-body-args-doc+
  "Processes LAMBDA-LIST to return the argument list (not parameters) of SB-C:DEFTRANSFORM in DEFUN-TYPED"
  :test 'string=)

;; DEFUN-BODY ==================================================================

(define-constant +defun-body-doc+
  "Processes LAMBDA-LIST to return code suitable for the caller part
inside the DEFUN generated by the DEFINE-POLYMORPH. Raises an error if
%LAMBDA-LIST-TYPE fails on *POTENTIAL-TYPE*."
  :test 'string=)

(define-constant +defun-body-doc-helper+
  "Processes LAMBDA-LIST assuming it is of type TYPE, and returns code that is
is suitable for caller part inside DEFUN generated by the DEFINE-POLYMORPH."
  :test 'string=)

;; LAMBDA-DECLARATIONS =========================================================

(define-constant +lambda-declarations-doc+
  "Returns the list of declarations given the LAMBDA-LIST. the LAMBDA-LIST should
be a TYPED-LAMBDA-LIST"
  :test 'string=)

;; TYPE-LIST-INTERSECT-P =========================================================

(define-constant +type-list-intersect-p+
  "Returns T if TYPE-LIST-1 and TYPE-LIST-2 intersect.
TODO: Currently, this only works if the types are subtypes of each other."
  :test 'string=)



